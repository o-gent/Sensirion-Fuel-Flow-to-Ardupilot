/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:    sensirion-driver-generator 0.9.0
 * Product:      sf06_lf
 * Version:      1.0
 */
/*
 * Copyright (c) 2022, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2cSf06Lf.h"
#include <Arduino.h>

SensirionI2cSf06Lf::SensirionI2cSf06Lf() {
}

float SensirionI2cSf06Lf::signalFlow(int16_t rawFlow,
                                     InvFlowScaleFactors invFlowScaleFactor) {
    float flow = 0.0;
    flow = (float)(rawFlow);
    flow = flow / (int)(invFlowScaleFactor);
    return flow;
}

float SensirionI2cSf06Lf::signalTemperature(int16_t rawTemperature) {
    float temperature = 0.0;
    temperature = rawTemperature / 200.0;
    return temperature;
}

float SensirionI2cSf06Lf::signalDeltaTemperature(int16_t rawDeltaTemperature) {
    float deltaTemperature = 0.0;
    deltaTemperature = rawDeltaTemperature / 1000.0;
    return deltaTemperature;
}

int16_t
SensirionI2cSf06Lf::signalThermalConductivity(int16_t rawThermalConductivity) {
    int16_t thermalConductivity = 0;
    thermalConductivity = rawThermalConductivity;
    return thermalConductivity;
}

int16_t
SensirionI2cSf06Lf::readMeasurementData(InvFlowScaleFactors invFlowScaleFactor,
                                        float& aFlow, float& aTemperature,
                                        uint16_t& aSignalingFlags) {
    int16_t rawFlow = 0;
    int16_t rawTemp = 0;
    uint16_t signalingFlags = 0u;
    int16_t localError = 0;
    localError = readMeasurementDataRaw(rawFlow, rawTemp, signalingFlags);
    if (localError != NO_ERROR) {
        return localError;
    }
    aFlow = signalFlow(rawFlow, invFlowScaleFactor);
    aTemperature = signalTemperature(rawTemp);
    aSignalingFlags = signalingFlags;
    return localError;
}

int16_t SensirionI2cSf06Lf::readThermalConductivityMeasurementData(
    int16_t& aThermalConductivity, float& aTemperature,
    float& aDeltaTemperature) {
    int16_t thCond = 0;
    int16_t rawTemp = 0;
    int16_t rawDeltaTemp = 0;
    int16_t localError = 0;
    localError =
        llreadThermalConductivityMeasurementData(thCond, rawTemp, rawDeltaTemp);
    if (localError != NO_ERROR) {
        return localError;
    }
    aThermalConductivity = signalThermalConductivity(thCond);
    aTemperature = signalTemperature(rawTemp);
    aDeltaTemperature = signalDeltaTemperature(rawDeltaTemp);
    return localError;
}

int16_t SensirionI2cSf06Lf::readProductIdentifier(uint32_t& productIdentifier,
                                                  uint8_t serialNumber[],
                                                  uint16_t serialNumberSize) {
    int16_t localError = 0;
    localError = readProductIdentifierPrepare();
    if (localError != NO_ERROR) {
        return localError;
    }
    localError = llreadProductIdentifier(productIdentifier, serialNumber,
                                         serialNumberSize);
    return localError;
}

int16_t SensirionI2cSf06Lf::startH2oContinuousMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3608, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(12);
    return localError;
}

int16_t SensirionI2cSf06Lf::startIpaContinuousMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3615, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(12);
    return localError;
}

int16_t SensirionI2cSf06Lf::readMeasurementDataRaw(int16_t& rawFlow,
                                                   int16_t& rawTemperature,
                                                   uint16_t& signalingFlags) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[9] = {0};
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 9,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getInt16(rawFlow);
    localError |= rxFrame.getInt16(rawTemperature);
    localError |= rxFrame.getUInt16(signalingFlags);
    return localError;
}

int16_t SensirionI2cSf06Lf::stopContinuousMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3ff9, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(1);
    return localError;
}

int16_t SensirionI2cSf06Lf::startSingleThermalConductivityMeasurementSync() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3646, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(2300);
    return localError;
}

int16_t SensirionI2cSf06Lf::startSingleThermalConductivityMeasurementAsync() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3646, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    return localError;
}

int16_t SensirionI2cSf06Lf::llreadThermalConductivityMeasurementData(
    int16_t& thermalConductivity, int16_t& rawTemperature,
    int16_t& rawDeltaTemperature) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[9] = {0};
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 9,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getInt16(thermalConductivity);
    localError |= rxFrame.getInt16(rawTemperature);
    localError |= rxFrame.getInt16(rawDeltaTemperature);
    return localError;
}

int16_t SensirionI2cSf06Lf::enterSleep() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x3677, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    return localError;
}

int16_t SensirionI2cSf06Lf::exitSleep() {
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x0, local_buffer, sizeof local_buffer);
    SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(25);
    return NO_ERROR;
}

int16_t SensirionI2cSf06Lf::readProductIdentifierPrepare() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x367c, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    return localError;
}

int16_t SensirionI2cSf06Lf::llreadProductIdentifier(uint32_t& productIdentifier,
                                                    uint8_t serialNumber[],
                                                    uint16_t serialNumberSize) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[18] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0xe102, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 18,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt32(productIdentifier);
    localError |= rxFrame.getBytes(serialNumber, serialNumberSize);
    return localError;
}

void SensirionI2cSf06Lf::begin(TwoWire& i2cBus, uint8_t i2cAddress) {
    _i2cBus = &i2cBus;
    _i2cAddress = i2cAddress;
}
